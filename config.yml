title: Create a release based workflow
tagline: Learn and practice a workflow based around creating releases on GitHub.
description: This course focuses on releases, and more complex branching strategies.
tags:
  - GitHub
template:
    name: release-based-workflow
    repo: AlienInvasion
before:
  # enable branch protection
  - type: updateBranchProtection
  - type: updateBranchProtection
    branch: release-v1.0
  # creating a welcome issue that will have the user's first instructions
  - type: createIssue
    title: Welcome
    body: 00.1_welcome.md
    data:
      releases: '%payload.repository.html_url%/releases'

steps:

  #1 - ask the user to create a beta release from the most recent commit on master
  - title: Create a beta release
    description: Create a beta release, or a pre-release, from the existing codebase.
    event: release.published
    link: '{{ repoUrl }}/issues/1'
    actions:
      # creates an issue with the next instructions about project boards
      - type: createIssue
        title: Organizing a release
        body: 01.1_project-board.md
        action_id: trackingIssue
      # responding in the first welcome issue, pointing the user to the next issue just created
      - type: respond
        issue: Welcome
        with: 01.2_next-step.md
        data:
          url: '%actions.trackingIssue.data.html_url%'
          releases: '{{ repoUrl }}/releases'
      # closes the welcome issue
      - type: closeIssue
        issue: Welcome

  #2 - The user should create a project board
  - title: Prepare for the next release
    description: Create a project board.
    event: project.created
    link: '{{ repoUrl }}/issues/2'
    actions:
    - type: respond
      issue: Organizing a release
      with: 02.1_move-a-card.md


  #3 - The user should add a card to the project board
  - title: Sorting issues
    description: Add an issue to a project column.
    event: project_card.created
    link: '{{ repoUrl }}/issues/2'
    actions:
      # check if the project card is an issue (if not, it's one of the automated cards)
      - type: gate
        left: '%payload.project_card.content_url%'
      - type: createIssue
        title: Adding a feature
        body: 04.1_update-readme.md
        action_id: addFeature
        data:
          username: '%user.username%'
      - type: respond
        with: 02.2_automation.md
        issue: Organizing a release
        data:
          url: '%actions.addFeature.data.html_url%'
      - type: closeIssue
        issue: Organizing a release


  #4 - User makes a change and opens a pull request against `base: release-v1.0`
  - title: Adding a feature
    description: Update the README.md and open a pull request.
    event: pull_request.opened
    link: '{{ repoUrl }}/issues/3'
    actions:
      # We make sure that the user's pull request has the base set to `release-v1.0`
      - type: gate
        left: '%payload.pull_request.base.ref%'
        operator: ===
        right: 'release-v1.0'
        # If the user opened a pull request to master instead...
        else:
          # we comment and tell them that they should try again
          - type: respond
            with: 05.1_wrong-base.md
            issue: '%payload.pull_request.number%'
          # TODO: reduce possible extra PRs by allowing learner to change the base instead of closing PR
          # and we close the pull request, unmerged
          - type: closeIssue
            issue: '%payload.pull_request.number%'
      # We approve their pull request
      - type: createReview
        body: 05.2_approval.md
        event: APPROVE

  #5 - The user merges their pull request into the release branch
  - title: Merge the pull request
    description: Merge the pull request to update the release branch.
    event: pull_request.closed
    link: '{{ repoUrl }}/pull/4'
    actions:
      # Because the event is the same for both, we make sure that the pull request is merged, and not just closed.
      - type: gate
        left: '%payload.pull_request.merged%'
        # If the pull request was closed with unmerged commits...
        else:
          # We reopen the pull request
          - type: octokit
            method: issues.edit
            state: open
            owner: '%payload.repository.owner.login%'
            repo: '%payload.repository.name%'
            number: '%payload.repository.pull_request.number%'
          # We comment and let them know that they should merge
          - type: respond
            with: 06.2_early-close.md
      # If the user does everything right, we create the next issue with instructions to create a pull request from the release branch into master
      - type: createIssue
        title: Create a release pull request
        body: 06.1_release-pr.md
        action_id: releaseIssue
      # We comment in the merged pull request, and point them to the new issue with instructions
      - type: respond
        with: 06.3_response.md
        data:
          url: '%actions.releaseIssue.data.html_url%'
      # We re-enable branch protection on the release branch
      - type: closeIssue
        issue: Adding a feature

  #6 - The user opens a pull request from the release branch into master
  - title: Open a release pull request
    description: Create the release pull request with base as master, and compare as the release branch.
    event: pull_request.opened
    link: '{{ repoUrl }}/issues/5'
    actions:
      # We check that the pull request has the correct "base" and "compare"
      - type: gate
        gates:
          - left: '%payload.pull_request.base.ref%'
            operator: ===
            right: master
          - left: '%payload.pull_request.head.ref%'
            operator: ===
            right: release-v1.0
        # If they do not have the correct base and compare fields...
        else:
          # We comment and tell them that the base and compare are wrong, and to try again
          - type: respond
            with: 07.2_wrong-base.md
          # We close the pull request
          - type: closeIssue
      # If they did everything right, we create a new pull request going into the release branch.
      # Currently the change is very minor, but it should make sense with the release.
      # TODO: remove addition of release drafter config from `green-colors` PR, this is added at a later point
      - type: createPullRequest
        title: More features for the next release
        body: 07.1_new-pr.md
        head: green-colors
        base: release-v1.0
        action_id: morefeaturesPR
      - type: respond
        with: 07.3_successful-open.md
        data:
          url: '%actions.morefeaturesPR.data.html_url%'
      - type: closeIssue
        issue: Create a release pull request
      - type: requestReviewFromRegistrant
        pullRequest: More features for the next release

  #7 - Bot creates a PR against release, learner approves
  - title: Approve ships for an upcoming release
    description: Approve ships for an upcoming release
    event: pull_request_review.submitted
    link: '{{ repoUrl }}/pull/7'
    actions:
    - type: mergePullRequest
    - type: octokit
      method: gitdata.deleteReference
      owner: '%payload.repository.owner.login%'
      repo: '%payload.repository.name%'
      ref: heads/green-colors
      # TODO: change these instructions to indicate the need for a new PR with release drafter config
    - type: respond
      with: 08.2_github-app.md
      issue: 6
    - type: respond
      with: 08.1_back-to-release.md
      data:
        url: '6'

  #8 - Install the GitHub app and then populate the release-drafter.yml file
  - title: GitHub app and configuration template
    description: Install the GitHub app to help with release notes, then populate the `release-drafter.yml` file
    # TODO: check that this PR is against the relase branch
    event: pull_request.opened
    link: '{{ repoUrl }}/pull/6'
    actions:
      - type: octokit
        method: pullRequests.getFiles
        owner: '%payload.repository.owner.login%'
        repo: '%payload.repository.name%'
        number: '%payload.pull_request.number%'
        action_id: pr_file
      - type: gate
        left: '%actions.pr_file.data%'
        operator: includes
        right: 'filename:.github/release-drafter.yml'
        else:
          - type: respond
            with: 08.3_config-validation.md
      - type: createReview
        body: mergedconfig.md
        event: APPROVE

  #9 - Merge the release drafter configuration
  - title: Merge the config for release drafter
    description: Merge the configuration file for release drafter, which sets a template for the release.
    event: pull_request.closed
    link: '{{ repoUrl }}/pull/8'
    actions:
      - type: respond
        with: gotoreleasepr.md
      - type: createReview
        body: 09.1_response.md
        event: APPROVE
        number: 6
      

  #10 - The user approves the branch merge into master
  - title: Merge in the release
    description: Merge the release branch into master.
    event: pull_request.closed
    link: '{{ repoUrl }}/pull/6'
    actions:
      # Because the event is the same for both, we make sure that the pull request is merged, and not just closed.
      - type: gate
        left: '%payload.pull_request.merged%'
        # If the pull request was closed with unmerged commits...
        else:
          # We reopen the pull request
          - type: octokit
            method: issues.edit
            state: open
            owner: '%payload.repository.owner.login%'
            repo: '%payload.repository.name%'
            number: '%payload.repository.pull_request.number%'
          # We comment and let them know that they should merge
          - type: respond
            with: 10.3_early-close.md
      # We create a new issue asking them to turn the draft release into a published release
      - type: createIssue
        title: Finalize the release
        body: 10.1_finalize-release.md
        data:
          releases: '%payload.repository.html_url%/releases'
        action_id: finalIssue
     # We comment in the merged pull request, pointing users to final instructions
      - type: respond
        with: 10.2_nice-merge.md
        data:
          url: '%actions.finalIssue.data.html_url%'

  #11 - User creates a release from the draft
  - title: Finalize the release
    description: Complete the release by publishing the drafted release
    event: release.published
    link: '{{ repoUrl }}/issues/8'
    actions:
    ## Create a new PR for the hotfix
      - type: createPullRequest
        title: Accidental bugs
        body: 11.1_hotfix-intro.md
        head: bug-fix
        base: master
        action_id: newPullRequest
      - type: octokit
        method: issues.addAssigneesToIssue
        owner: '%payload.repository.owner.login%'
        repo: '%payload.repository.name%'
        number: '%actions.newPullRequest.data.number%'
        assignees: '%payload.repository.owner.login%'
      ## Suggest a change in the new PR
      # TODO: request a review from the learner
      - type: octokit
        method: pullRequests.createComment
        owner: '%payload.repository.owner.login%'
        repo: '%payload.repository.name%'
        number: '%actions.newPullRequest.data.number%'
        commit_id: '%actions.newPullRequest.data.head.sha%'
        path: game.js
        body: |
          How's this change? 

          ```suggestion
              starCtx.fillStyle = "#000";
          ```
          For more information about suggest changes, check out this [GitHub Help](https://help.github.com/articles/incorporating-feedback-in-your-pull-request) article.
        position: 5
      - type: respond
        with: 11.2_next-bug.md
        issue: Finalize the release
        data:
          url: '%actions.newPullRequest.data.html_url%'
      - type: closeIssue
        issue: Finalize the release

  #12 - User resolves the bug, then approves the pull request and it is merged into master
  - title: Submit a hotfix
    description: Resolve the bug, then merge the fix into the master branch
    event: pull_request_review.submitted
    link: '{{ repoUrl }}/pull/9'
    actions:
    - type: mergePullRequest
    # TODO: request a review from the learner
    - type: createPullRequest
      title: Backport the hotfix
      body: 13.2_backport.md
      head: bug-fix
      base: release-v1.0
      action_id: backportPR
    - type: respond
      with: 12.1_fix-merged.md
      data:
        url: '%actions.backportPR.data.html_url%'

  #13 - Hotfix is reverse merged into the release branch
  - title: Backport the hotfix
    description: Apply the patch commits to the release branch
    event: pull_request_review.submitted
    link: '{{ repoUrl }}/pull/10'
    actions:
    - type: mergePullRequest
    - type: createIssue
      title: Create a patch release
      body: 14.2_last-release.md
      data:
        releases: '%payload.repository.html_url%/releases'
      action_id: patchIssue
    - type: respond
      with: 14.1_backport-shipped.md
      data:
        url: '%actions.patchIssue.data.html_url%'

  #14 - Backport the hotfix into existing release
  - title: Release v1.0.1
    description: Create a release based on the most recent commit on the release branch
    event: release.published
    link: '{{ repoUrl }}/issues/11'
    actions:
      - type: createIssue
        title: Congratulations
        body: 15.1_congratulations.md
        action_id: lastIssue
      - type: respond
        with: 14.3_point-to-last.md
        issue: Create a patch release
        data:
          url: '%actions.lastIssue.data.html_url%'
      - type: closeIssue
        issue: Create a patch release
